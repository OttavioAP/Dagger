/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user/": {
    /** Update User */
    post: operations["update_user_user__post"];
  };
  "/user/get_user_by_username": {
    /** Get User By Username */
    get: operations["get_user_by_username_user_get_user_by_username_get"];
  };
  "/user/by_team": {
    /** Get Users By Team */
    get: operations["get_users_by_team_user_by_team_get"];
  };
  "/tasks/": {
    /** Get All Tasks */
    get: operations["get_all_tasks_tasks__get"];
    /** Task Post */
    post: operations["task_post_tasks__post"];
  };
  "/teams/": {
    /** Get All Teams */
    get: operations["get_all_teams_teams__get"];
    /** Create Team */
    post: operations["create_team_teams__post"];
  };
  "/teams/{team_id}": {
    /** Delete Team */
    delete: operations["delete_team_teams__team_id__delete"];
  };
  "/dag/": {
    /** Get All Dags */
    get: operations["get_all_dags_dag__get"];
    /** Dag Action */
    post: operations["dag_action_dag__post"];
  };
  "/user_tasks/": {
    /** Get All User Tasks */
    get: operations["get_all_user_tasks_user_tasks__get"];
    /** Modify User Task */
    post: operations["modify_user_task_user_tasks__post"];
  };
  "/week/": {
    /** Get Weeks */
    get: operations["get_weeks_week__get"];
  };
  "/agentic/search": {
    /** Agentic Search */
    get: operations["agentic_search_agentic_search_get"];
  };
  "/health": {
    /** Health Check */
    get: operations["health_check_health_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CreateTeamRequest */
    CreateTeamRequest: {
      /** Team Name */
      team_name: string;
    };
    /**
     * DagAction
     * @enum {string}
     */
    DagAction: "add_edges" | "delete_edges";
    /** DagRequest */
    DagRequest: {
      /**
       * First Task Id
       * Format: uuid
       */
      first_task_id: string;
      /** Dependencies */
      dependencies: string[];
      /**
       * Dag Id
       * Format: uuid
       */
      dag_id?: string;
      /**
       * Team Id
       * Format: uuid
       */
      team_id: string;
      action: components["schemas"]["DagAction"];
    };
    /** DagResponse */
    DagResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** SearchResponse */
    SearchResponse: {
      /** Reply */
      reply: string;
      /** Weeks */
      weeks: components["schemas"]["week"][];
      /** Total Count */
      total_count: number;
    };
    /**
     * SearchType
     * @enum {string}
     */
    SearchType: "regular" | "semantic" | "compare";
    /**
     * TaskFocus
     * @enum {string}
     */
    TaskFocus: "LOW" | "MEDIUM" | "HIGH";
    /**
     * TaskPriority
     * @enum {string}
     */
    TaskPriority: "LOW" | "MEDIUM" | "HIGH" | "EMERGENCY";
    /** TaskRequest */
    TaskRequest: {
      /** Task Id */
      task_id?: string | null;
      /** Task Name */
      task_name?: string | null;
      /** Team Id */
      team_id?: string | null;
      /** Deadline */
      deadline?: string | null;
      /** Points */
      points?: number | null;
      /** @default LOW */
      priority?: components["schemas"]["TaskPriority"] | null;
      /** @default LOW */
      focus?: components["schemas"]["TaskFocus"] | null;
      /** Description */
      description?: string | null;
      /** Notes */
      notes?: string | null;
      action: components["schemas"]["task_action"];
    };
    /**
     * UpdateUserOption
     * @enum {string}
     */
    UpdateUserOption: "create" | "update" | "delete";
    /** UpdateUserRequest */
    UpdateUserRequest: {
      /** User Id */
      user_id?: string | null;
      /** Team Id */
      team_id?: string | null;
      /** Username */
      username?: string | null;
      action: components["schemas"]["UpdateUserOption"];
    };
    /** UserTasksRequest */
    UserTasksRequest: {
      /** User Id */
      user_id: string;
      /** Task Id */
      task_id: string;
      action: components["schemas"]["option"];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * WeekRequestType
     * @enum {string}
     */
    WeekRequestType: "search_query" | "compare_weeks" | "get_weeks";
    /** WeekResponse */
    WeekResponse: {
      /** Weeks */
      weeks: components["schemas"]["week"][];
      /** Total Count */
      total_count: number;
    };
    /** dag */
    dag: {
      /** Dag Id */
      dag_id?: string | null;
      /**
       * Team Id
       * Format: uuid
       */
      team_id: string;
      /** Dag Graph */
      dag_graph: {
        [key: string]: string[];
      };
    };
    /**
     * option
     * @enum {string}
     */
    option: "add" | "delete";
    /**
     * task
     * @description A task represents a unit of work assigned to a team.
     *
     * Tasks are the fundamental building blocks of project management, containing information about
     * what needs to be done, when it needs to be done, and how important it is. Each task belongs
     * to a team and can be worked on by team members.
     */
    task: {
      /** Id */
      id?: string | null;
      /** Task Name */
      task_name: string;
      /**
       * Team Id
       * Format: uuid
       */
      team_id: string;
      /** @default LOW */
      priority?: components["schemas"]["TaskPriority"];
      /** @default LOW */
      focus?: components["schemas"]["TaskFocus"];
      /** Deadline */
      deadline?: string | null;
      /** Points */
      points?: number | null;
      /** Date Of Completion */
      date_of_completion?: string | null;
      /**
       * Date Of Creation
       * Format: date-time
       */
      date_of_creation?: string;
      /** Description */
      description?: string | null;
      /** Notes */
      notes?: string | null;
    };
    /**
     * task_action
     * @enum {string}
     */
    task_action: "create" | "edit" | "delete" | "complete";
    /**
     * team
     * @description A team represents a group of users working together on tasks.
     *
     * Teams are the organizational units that contain users and tasks. Each team has a unique name
     * and can have multiple users as members. Teams provide the context for task collaboration
     * and project management.
     */
    team: {
      /** Team Name */
      team_name: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /**
     * user
     * @description A user represents a team member in the system.
     *
     * Users are the individual participants who work on tasks within teams. Each user must belong
     * to exactly one team, and can collaborate on tasks within that team. Users are identified
     * by their unique username and UUID.
     */
    user: {
      /** Username */
      username: string;
      /**
       * Team Id
       * Format: uuid
       */
      team_id: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** user_tasks */
    user_tasks: {
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Task Id
       * Format: uuid
       */
      task_id: string;
      /** Assigned At */
      assigned_at?: string | null;
    };
    /**
     * week
     * @description A model representing a weekly summary of a user's productivity and accomplishments.
     *
     * This model captures a week's worth of work activity, including tasks completed,
     * collaboration metrics, and AI-generated feedback to improve productivity.
     * Each week spans from start_date to end_date (7 days later).
     */
    week: {
      /** Id */
      id?: string | null;
      /**
       * Start Date
       * Format: date-time
       * @description The start date of the week
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       * @description The end date of the week (7 days after start_date)
       */
      end_date: string;
      /**
       * User Id
       * Format: uuid
       * @description The ID of the user whose productivity is being summarized
       */
      user_id: string;
      /**
       * Summary
       * @description AI-generated summary of the week's work and productivity patterns
       */
      summary?: string | null;
      /**
       * Feedback
       * @description AI-generated feedback aimed at improving worker productivity
       */
      feedback?: string | null;
      /**
       * Collaborators
       * @description List of user IDs who were assigned roles on tasks during this week
       */
      collaborators?: string[] | null;
      /**
       * Missed Deadlines
       * @description List of task IDs where deadlines were missed during this week
       */
      missed_deadlines?: string[] | null;
      /**
       * Completed Tasks
       * @description List of task IDs that were completed during this week
       */
      completed_tasks?: string[] | null;
      /**
       * Points Completed
       * @description Total points completed, where points represent estimated hours of work
       */
      points_completed?: number | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Update User */
  update_user_user__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User By Username */
  get_user_by_username_user_get_user_by_username_get: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Users By Team */
  get_users_by_team_user_by_team_get: {
    parameters: {
      query: {
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["user"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Tasks */
  get_all_tasks_tasks__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["task"][];
        };
      };
    };
  };
  /** Task Post */
  task_post_tasks__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["task"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Teams */
  get_all_teams_teams__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["team"][];
        };
      };
    };
  };
  /** Create Team */
  create_team_teams__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["team"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Team */
  delete_team_teams__team_id__delete: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Dags */
  get_all_dags_dag__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["dag"][];
        };
      };
    };
  };
  /** Dag Action */
  dag_action_dag__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DagRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DagResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All User Tasks */
  get_all_user_tasks_user_tasks__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["user_tasks"][];
        };
      };
    };
  };
  /** Modify User Task */
  modify_user_task_user_tasks__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTasksRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["user_tasks"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Weeks */
  get_weeks_week__get: {
    parameters: {
      query: {
        request_type: components["schemas"]["WeekRequestType"];
        query?: string | null;
        week_id?: string | null;
        number_of_weeks: number;
        start_date?: string | null;
        end_date?: string | null;
        user_id?: string | null;
        team_id?: string | null;
        collaborators?: string[] | null;
        missed_deadlines_range?: [number, number] | null;
        completed_task_range?: [number, number] | null;
        points_range?: [number, number] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WeekResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Agentic Search */
  agentic_search_agentic_search_get: {
    parameters: {
      query: {
        search_type: components["schemas"]["SearchType"];
        query?: string | null;
        week_id?: string | null;
        number_of_weeks?: number;
        start_date?: string | null;
        end_date?: string | null;
        user_id?: string | null;
        team_id?: string | null;
        collaborators?: string[] | null;
        missed_deadlines_range?: [number, number] | null;
        completed_task_range?: [number, number] | null;
        points_range?: [number, number] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Health Check */
  health_check_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
