// This file is auto-generated by @hey-api/openapi-ts

export type CreateTeamRequest = {
    team_name: string;
};

export type DagAction = 'create' | 'add_edge' | 'delete_edge';

export type DagRequest = {
    dag_id?: string | null;
    first_task_id: string;
    second_task_id?: string;
    team_id: string;
    action: DagAction;
};

export type DagResponse = {
    success: boolean;
    message: string;
    dag_id?: string | null;
    new_dag_id?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type SearchResponse = {
    reply: string;
    weeks: Array<Week>;
};

export type TaskFocus = 'low' | 'medium' | 'high';

export type TaskPriority = 'low' | 'medium' | 'high' | 'emergency';

export type TaskRequest = {
    task_id?: string | null;
    task_name?: string | null;
    team_id?: string | null;
    deadline?: string | null;
    date_of_completion?: string | null;
    points?: number | null;
    priority?: TaskPriority | null;
    focus?: TaskFocus | null;
    description?: string | null;
    notes?: string | null;
    action: TaskAction;
};

export type UpdateUserOption = 'create' | 'update' | 'delete';

export type UpdateUserRequest = {
    user_id: string;
    team_id?: string | null;
    action: UpdateUserOption;
};

export type UserTasksRequest = {
    user_id: string;
    task_id: string;
    action: Option;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type Dag = {
    dag_id?: string | null;
    team_id: string;
    dag_graph: {
        [key: string]: Array<string>;
    };
};

export type Option = 'add' | 'delete';

export type Task = {
    id?: string | null;
    task_name: string;
    team_id: string;
    priority?: TaskPriority;
    focus?: TaskFocus;
    deadline?: string | null;
    points?: number | null;
    date_of_completion?: string | null;
    date_of_creation?: string;
    description?: string | null;
    notes?: string | null;
};

export type TaskAction = 'create' | 'edit' | 'delete';

export type Team = {
    team_name: string;
    id: string;
};

export type User = {
    username: string;
    team_id: string;
    id: string;
};

export type UserTasks = {
    user_id: string;
    task_id: string;
    assigned_at?: string | null;
};

export type Week = {
    id?: string | null;
    start_date: string;
    end_date: string;
    user_id: string;
    summary?: string | null;
    feedback?: string | null;
    collaborators?: Array<string> | null;
    missed_deadlines?: Array<string> | null;
    completed_tasks?: Array<string> | null;
    points_completed?: number | null;
};

export type UpdateUserUserPostData = {
    body: UpdateUserRequest;
    path?: never;
    query?: never;
    url: '/user/';
};

export type UpdateUserUserPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserUserPostError = UpdateUserUserPostErrors[keyof UpdateUserUserPostErrors];

export type UpdateUserUserPostResponses = {
    /**
     * Successful Response
     */
    201: User;
};

export type UpdateUserUserPostResponse = UpdateUserUserPostResponses[keyof UpdateUserUserPostResponses];

export type GetUserByUsernameUserGetUserByUsernamePostData = {
    body?: never;
    path?: never;
    query: {
        username: string;
    };
    url: '/user/get_user_by_username';
};

export type GetUserByUsernameUserGetUserByUsernamePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByUsernameUserGetUserByUsernamePostError = GetUserByUsernameUserGetUserByUsernamePostErrors[keyof GetUserByUsernameUserGetUserByUsernamePostErrors];

export type GetUserByUsernameUserGetUserByUsernamePostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type GetUserByUsernameUserGetUserByUsernamePostResponse = GetUserByUsernameUserGetUserByUsernamePostResponses[keyof GetUserByUsernameUserGetUserByUsernamePostResponses];

export type GetUsersByTeamUserByTeamGetData = {
    body?: never;
    path?: never;
    query: {
        team_id: string;
    };
    url: '/user/by_team';
};

export type GetUsersByTeamUserByTeamGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersByTeamUserByTeamGetError = GetUsersByTeamUserByTeamGetErrors[keyof GetUsersByTeamUserByTeamGetErrors];

export type GetUsersByTeamUserByTeamGetResponses = {
    /**
     * Successful Response
     */
    200: Array<User>;
};

export type GetUsersByTeamUserByTeamGetResponse = GetUsersByTeamUserByTeamGetResponses[keyof GetUsersByTeamUserByTeamGetResponses];

export type GetAllTasksTasksGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tasks/';
};

export type GetAllTasksTasksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Task>;
};

export type GetAllTasksTasksGetResponse = GetAllTasksTasksGetResponses[keyof GetAllTasksTasksGetResponses];

export type TaskPostTasksPostData = {
    body: TaskRequest;
    path?: never;
    query?: never;
    url: '/tasks/';
};

export type TaskPostTasksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TaskPostTasksPostError = TaskPostTasksPostErrors[keyof TaskPostTasksPostErrors];

export type TaskPostTasksPostResponses = {
    /**
     * Successful Response
     */
    201: Task;
};

export type TaskPostTasksPostResponse = TaskPostTasksPostResponses[keyof TaskPostTasksPostResponses];

export type GetAllTeamsTeamsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teams/';
};

export type GetAllTeamsTeamsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Team>;
};

export type GetAllTeamsTeamsGetResponse = GetAllTeamsTeamsGetResponses[keyof GetAllTeamsTeamsGetResponses];

export type CreateTeamTeamsPostData = {
    body: CreateTeamRequest;
    path?: never;
    query?: never;
    url: '/teams/';
};

export type CreateTeamTeamsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTeamTeamsPostError = CreateTeamTeamsPostErrors[keyof CreateTeamTeamsPostErrors];

export type CreateTeamTeamsPostResponses = {
    /**
     * Successful Response
     */
    201: Team;
};

export type CreateTeamTeamsPostResponse = CreateTeamTeamsPostResponses[keyof CreateTeamTeamsPostResponses];

export type DeleteTeamTeamsTeamIdDeleteData = {
    body?: never;
    path: {
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}';
};

export type DeleteTeamTeamsTeamIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTeamTeamsTeamIdDeleteError = DeleteTeamTeamsTeamIdDeleteErrors[keyof DeleteTeamTeamsTeamIdDeleteErrors];

export type DeleteTeamTeamsTeamIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteTeamTeamsTeamIdDeleteResponse = DeleteTeamTeamsTeamIdDeleteResponses[keyof DeleteTeamTeamsTeamIdDeleteResponses];

export type GetAllDagsDagGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dag/';
};

export type GetAllDagsDagGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Dag>;
};

export type GetAllDagsDagGetResponse = GetAllDagsDagGetResponses[keyof GetAllDagsDagGetResponses];

export type DagActionDagPostData = {
    body: DagRequest;
    path?: never;
    query?: never;
    url: '/dag/';
};

export type DagActionDagPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DagActionDagPostError = DagActionDagPostErrors[keyof DagActionDagPostErrors];

export type DagActionDagPostResponses = {
    /**
     * Successful Response
     */
    200: DagResponse;
};

export type DagActionDagPostResponse = DagActionDagPostResponses[keyof DagActionDagPostResponses];

export type GetAllUserTasksUserTasksGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user_tasks/';
};

export type GetAllUserTasksUserTasksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserTasks>;
};

export type GetAllUserTasksUserTasksGetResponse = GetAllUserTasksUserTasksGetResponses[keyof GetAllUserTasksUserTasksGetResponses];

export type ModifyUserTaskUserTasksPostData = {
    body: UserTasksRequest;
    path?: never;
    query?: never;
    url: '/user_tasks/';
};

export type ModifyUserTaskUserTasksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModifyUserTaskUserTasksPostError = ModifyUserTaskUserTasksPostErrors[keyof ModifyUserTaskUserTasksPostErrors];

export type ModifyUserTaskUserTasksPostResponses = {
    /**
     * Successful Response
     */
    201: UserTasks;
};

export type ModifyUserTaskUserTasksPostResponse = ModifyUserTaskUserTasksPostResponses[keyof ModifyUserTaskUserTasksPostResponses];

export type GetWeeksWeekGetData = {
    body?: never;
    path?: never;
    query?: {
        user_id?: string | null;
        team_id?: string | null;
    };
    url: '/week/';
};

export type GetWeeksWeekGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWeeksWeekGetError = GetWeeksWeekGetErrors[keyof GetWeeksWeekGetErrors];

export type GetWeeksWeekGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Week>;
};

export type GetWeeksWeekGetResponse = GetWeeksWeekGetResponses[keyof GetWeeksWeekGetResponses];

export type AgenticSearchAgenticSearchGetData = {
    body?: never;
    path?: never;
    query: {
        query: string;
        username: string;
        team_name: string;
    };
    url: '/agentic/search';
};

export type AgenticSearchAgenticSearchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AgenticSearchAgenticSearchGetError = AgenticSearchAgenticSearchGetErrors[keyof AgenticSearchAgenticSearchGetErrors];

export type AgenticSearchAgenticSearchGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type AgenticSearchAgenticSearchGetResponse = AgenticSearchAgenticSearchGetResponses[keyof AgenticSearchAgenticSearchGetResponses];

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};